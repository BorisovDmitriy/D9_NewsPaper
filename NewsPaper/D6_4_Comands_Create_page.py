
# D6_2 Доработайте своё новостное приложение:
#
# 1.Сделайте новую страничку с адресом /news/, на которой должен выводиться список всех новостей.
# 2.Сделайте отдельную страничку для конкретной новости по адресу /news/<id новости>.
# 3.Все странички должны быть частью основного шаблона default.html.

# Модуль D1..D5
# №1 Переходим в файл NewsPaper/settings.py
# Найдём там список INSTALLED_APPS
# --добавляем приложения 'news'
# --выполняем python manage.py migrate

# №2 создать нашего первого администратора
# --выполнить python manage.py createsuperuser
# Username: dmitriy
# password: qwer147
# Запускаем ещё раз проект:  python manage.py runserver

# №3 подключаем ещё приложения для создания статических страничек
# Переходим в файл NewsPaper/settings.py
# Найдём там список INSTALLED_APPS
# 'django.contrib.sites',
# 'django.contrib.flatpages',
# ниже в файле и добавим переменную SITE_ID, равную единице SITE_ID=1

# №4 После чего нам надо будет сделать так, чтобы адреса в будущем написанных
# нами страничек были доступны нам для перехода по ним.
# Для этого нам понадобится файл NewsPaper/setting/urls.py.
# Добавляем: path('pages/', include('django.contrib.flatpages.urls')),

# №5 Переходим в файл NewsPaper/settings.py, зменим список MIDDLEWARE
# Добавляем: 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',

# №6 Делаем миграцию
# выполняем python manage.py migrate

# №7 выполняем python manage.py runserver запуск сервера и переходим в админку для создания первой странички /about/

# №8 В директории с файлом manage.py нужно создать файл по следующему пути: templates/flatpages/default.html.
# заполняем его

# №9 Переходим в файл NewsPaper/settings.py поменяйте список TEMPLATES в настройках на следующий
# import os
# и наполняем строку 'DIRS': 'DIRS': [os.path.join(BASE_DIR, 'templates')],

# №10 сщздаем новую страничку /contacts/и шаблон  contact_page.html. Создадим новую страницу.
# Только на этот раз добавим в advanced settings template name: flatpages/contact_page.html

# №11 Создаем админку, наследуемый от FlatPageAdmin (Для того чтобы мы могли видеть такие поля,
# как «Позволить комментировать» или «Отображение только зарегистрированным пользователям»,)
# Создадим файл NewPaper/fpages/admin.py со следующим содержанием
# Переходим в файл NewsPaper/settings.py
# Найдём там список INSTALLED_APPS и добавим приложение 'fpages'

# №12 Отредактируем немного наши уже написанные страницы.
# templates/flatpages/default.html
# templates/flatpages/contact_page.html
# Здесь мы используем тег {% include …. %}, который позволяет нам включать один шаблон в другой.

# №13 Опять меняем с добавлением новой конструкции {% block content %}, и {% enblock content %}.
# default.html
# contact_page.html

# # №14 Создаем шаблон Bootstrap(качаем архив, создаем папку static, рвспаковываем архив,
# # удаляем лишнее..СМ D1.5)
# Переходим в файл NewsPaper/settings.py И в настройках добавить строчку в самом конце,
# для подгрузки стилей из папки static :
# STATICFILES_DIRS = [BASE_DIR / "static"]

# содержимое файла index.html нам надо скопировать в шаблон default.html, и смело можем его затем удалять (СМ D1.5)
# вносим изменения в шаблон

# D6.2...D6.4
# Приложение news/,модели и БД созданы и наполнены см D5.9

# №15 Зарегистрировать модели, иначе не увидим их в админке.
# Регистрируем модели!!!
# Переходим в файл NewsPaper/news/admin.py

# При создании тестовых моделей упоминалось применение функции
#     def __str__(self):
#         return f'{self.heading.title()}: {self.text_post[:20]}'
# Надо применять, без нее не выодит данные из БД в HTML на станичках

# №16 Пишем первую ВЬЮШКУ
# Переходим в файл NewsPaper/news/views.py
# Заполняем вьюху на модель Post в соответвии с заданием (см D6.2)

# №17 настроим адрес, чтобы любой пользователь нашего приложения мог зайти и полюбоваться на наши товары.
# Для этого создадим файл urls.py в папке с нашим приложением(news/urls.py)
# Заполняем в (см D6.2)

# №18 вывод из базы данных. Для этого нам надо отправиться в наш главный файл urls.py,
# в котором мы уже подключали flatpages и сделать так, чтобы он автоматически включал
# все наши адреса из приложения и добавлял к нему префикс news
# Переходим в файл NewsPaper/NewsPaper/urls.py
# Вносим изменения

# Проверяем сайт, пока все неказисто отображено, но продолжим, потом штрихи

# №19вывести информацию о каком-то конкретной новости.
# Переходим в файл NewsPaper/news/views.py, добавим детализированный  класс объекта ДЛЯ новостей

# №20 Переходим в файл NewsPaper/NewsPaper/urls.py
# Вносим изменения

# Проверяем сайт, пока все неказисто отображено, но продолжим, потом штрихи
# Теперь по адресу news/<id товара> мы можем получить
# какой-то отдельный товар и информацию о нём (http://127.0.0.1:8000/news/3)

# D6.3. Продолжаем постигать шаблоны
# ЗАДАНИЕ модуля

# Измените внешний вид страницы /news/:
#
#         --Выводите новости в следующем виде — заголовок, дата публикации в формате (день.месяц.год),
#         затем первые 20 слов текста статьи.
#         --Сверху страницы должно быть выведено количество всех новостей (используется фильтр news|length).
#         --По ссылке /news/<id новости> должна выводиться детальная информация о новости.
#         --Заголовок, дата публикации всё в том же формате, и полный текст статьи.
#         --Новости должны выводиться в порядке от более свежей к старой.

# №21 Переходим в файл templates/posts.html
# добавляем конструкцию if..else

# # №22 Создадим эту таблицу в нашем шаблоне posts.html.
# Принципы построения таблиц примерно следующие:
#         Открывается тег table (это сама таблица), в котором будут храниться строчки и столбцы.
#         Если вы хотите положить столбцы в строчку, то открываете тег tr (TableRow) и в него вписываете столбцы
#         (тег td) с содержанием того, что вам надо вывести.
# --Добавили столбцы
# --В каждом столбце у нас должна стоять конкретная информация об отдельном товаре.
# # Для этого нам на помощь приходят циклы. Да-да, циклы есть и в шаблонах, и выглядят они примерно следующим образом:
# В Python:
# for a in some_list:
#     <операторы>
# В шаблонизаторе:
# {% for a in some_list %}
# <какой-либо html-код>
# {% endfor %}

# №23 Сверху страницы должно быть выведено количество всех новостей (используется фильтр news|length
# попробуем добавить в наш шаблон ещё одну переменную, помимо списка новостей.
# Переходим в файл NewsPaper/news/views.py
# Прописываем:
# {% if posts %}
# <h3>Количество новостей={{ posts|length }} {% endif %}</h3>

# 24 Добавил в шаблон post таблицу и вывод как в задании

# №25--Новости должны выводиться в порядке от более свежей к старой.
# добавил в предсталение строку
# queryset = Post.objects.order_by('-create_time')

# №26 добавляем и создаем фильтр Censor
# --создать папку templatetags и поместить в неё два файла: __init__.py и custom_filters.py
# в custom_filters.py добавим следующие строки:
# from django import template
# register = template.Library()  # если мы не зарегистрируем наши фильтры, то Django никогда не узнает, где именно их
# искать, и фильтры потеряются
# Пишем функцию на поиск матных слов
# добавляем фильтр в шаблоны posts и post
# {% load custom_filters %} <!-- не забываем заранее загружать наши фильтры! -->
# {{post.heading | truncatewords: 2 | censor: '***'}}
# {{post.text_post | truncatechars: 50 | censor: '***'}}


